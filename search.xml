<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue仿蘑菇街项目</title>
      <link href="/Vue%E4%BB%BF%E8%98%91%E8%8F%87%E8%A1%97%E9%A1%B9%E7%9B%AE/"/>
      <url>/Vue%E4%BB%BF%E8%98%91%E8%8F%87%E8%A1%97%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    这是根据王元红老师指导完成的类似于蘑菇街的电商APP。后端数据接口由王元红老师提供，课程指路<a href="https://www.bilibili.com/video/BV15741177Eh?from=search&seid=18165949126617740700&spm_id_from=333.337.0.0">最全最新Vue、Vuejs教程，从入门到精通</a></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1885118991&auto=1&height=66" autoplay=true></iframe><h2 id="1、项目描述"><a href="#1、项目描述" class="headerlink" title="1、项目描述"></a>1、项目描述</h2><ul><li>项目基于VueCLI3脚手架 + Vue全家桶 + ES6 + Webpack等技术开发</li><li>项目采用模块化、组件化、工程化的模式开发</li><li>项目主要分为四大模块：首页 + 分类 + 购物车 + 我的</li></ul><h2 id="2、使用的插件或第三方库"><a href="#2、使用的插件或第三方库" class="headerlink" title="2、使用的插件或第三方库"></a>2、使用的插件或第三方库</h2><ul><li><p>使用 vue-router 开发单页面</p></li><li><p>使用 vuex 管理应用组件的状态</p></li><li><p>使用 axios 的封装从后端拿取数据</p></li><li><p>使用 better-scroll 实现移动端页面滑动效果</p></li><li><p>使用mitt实现$bus事件总线</p></li></ul><h2 id="3、实现的功能"><a href="#3、实现的功能" class="headerlink" title="3、实现的功能"></a>3、实现的功能</h2><ul><li><p> 首页商品款式的切换</p></li><li><p>首页到详情页的跳转</p></li><li><p>右下角回到顶部按钮</p></li></ul><h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h3><p>以下是项目截图</p><p><img src="/Vue%E4%BB%BF%E8%98%91%E8%8F%87%E8%A1%97%E9%A1%B9%E7%9B%AE/01.png"></p><p><img src="/Vue%E4%BB%BF%E8%98%91%E8%8F%87%E8%A1%97%E9%A1%B9%E7%9B%AE/02.png"></p><p><img src="/Vue%E4%BB%BF%E8%98%91%E8%8F%87%E8%A1%97%E9%A1%B9%E7%9B%AE/03.png"></p><h2 id="项目源码已放到GitHub上，欢迎访问"><a href="#项目源码已放到GitHub上，欢迎访问" class="headerlink" title="项目源码已放到GitHub上，欢迎访问~"></a>项目源码已放到GitHub上，欢迎访问~</h2><h2 id="项目地址-https-github-com-xiaoyyya-suermarket"><a href="#项目地址-https-github-com-xiaoyyya-suermarket" class="headerlink" title="项目地址:https://github.com/xiaoyyya/suermarket"></a>项目地址:<a href="https://github.com/xiaoyyya/suermarket">https://github.com/xiaoyyya/suermarket</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/08%E6%80%BB%E7%BB%93--promise/"/>
      <url>/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/08%E6%80%BB%E7%BB%93--promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Promise"><a href="#一、Promise" class="headerlink" title="一、Promise"></a>一、Promise</h2><ul><li><h3 id="promise-的基本使用"><a href="#promise-的基本使用" class="headerlink" title="promise 的基本使用"></a>promise 的基本使用</h3><ul><li>如何将异步操作放入promise</li><li>（resolve，reject）=》then()/catch</li></ul></li><li><h3 id="promise的链式调用"><a href="#promise的链式调用" class="headerlink" title="promise的链式调用"></a>promise的链式调用</h3><ul><li>一开始new promise</li><li>Promise.resolve 对结果进行处理的时候，直接返回 return res+xxx<ul><li>对错误的处理 调用reject</li><li>throw ‘error message’</li></ul></li></ul></li><li><h3 id="promise的all方法"><a href="#promise的all方法" class="headerlink" title="promise的all方法"></a>promise的all方法</h3><ul><li>将多个异步操作放到一起</li><li>当异步操作都完成，再统一进行处理</li></ul></li></ul><h2 id="二、vuex"><a href="#二、vuex" class="headerlink" title="二、vuex"></a>二、vuex</h2><ul><li>什么是状态管理</li><li>vuex的基本使用<ul><li>直接修改state</li><li>mutations–&gt;devtools</li></ul></li><li>核心概念<ul><li>state–&gt;单一状态树</li><li>getters</li><li>mutations</li><li>actions–&gt;异步操作（promise</li><li>modules</li></ul></li><li>目录组织方式</li></ul><h2 id="三、网络请求封装"><a href="#三、网络请求封装" class="headerlink" title="三、网络请求封装"></a>三、网络请求封装</h2><ul><li>网络请求方式的选择</li><li>axios的基本使用</li><li>axios相关配置</li><li>axios创建实例</li><li>axios的封装</li></ul><h2 id="四、项目开发"><a href="#四、项目开发" class="headerlink" title="四、项目开发"></a>四、项目开发</h2><ul><li><p>划分项目结构</p></li><li><p>引用了两个css文件</p></li><li><p>vue.config.js和.editorconfig</p></li><li><p>项目的模块划分：tabbar–》路由映射</p></li><li><p>首页开发</p><ul><li>navbar的封装</li><li>网络数据的请求</li><li>轮播图</li><li>推荐消息</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>H5学习</title>
      <link href="/H5%E5%AD%A6%E4%B9%A0/"/>
      <url>/H5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML声明"><a href="#HTML声明" class="headerlink" title="HTML声明"></a>HTML声明</h2><!DOCTYPE html><p>在h5中只有1种声明，html4.01有四种</p><h2 id="html用于短的引用"><a href="#html用于短的引用" class="headerlink" title="html用于短的引用"></a>html<q>用于短的引用</h2><p>wwwf的目标是：<q>构建人与自然和谐共存的世界</q></p><p>长引用<blockquote></p><p>html<blockquote>定义引用，浏览器会对这个元素进行缩进</p><h2 id="为什么使用HTML5元素"><a href="#为什么使用HTML5元素" class="headerlink" title="为什么使用HTML5元素"></a>为什么使用HTML5元素</h2><p>假如使用html4的话，开发者会使用他们喜爱的属性名来设置页面元素的样式：</p><p>eg:header、top、bottom、footer、menu等，如此浏览器便无法正确识别网页内容。</p><p>但是通过h5元素，比如<hrader> <footer> <nav><section>等问题就会迎刃而解</p><h2 id="HTML5样式指南和代码约定"><a href="#HTML5样式指南和代码约定" class="headerlink" title="HTML5样式指南和代码约定"></a>HTML5样式指南和代码约定</h2><ol><li><p>在文档首行声明文档类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></li></ol><p>2.使用小写元素名</p><p>3.关闭html元素，例如<p></p></p><p>4.使用小写属性名</p><p>5.属性名加引号（没有引号属性名不能添加空格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;table striped&quot;&gt;</span><br></pre></td></tr></table></figure><p>6.必须的属性</p><p>对于图像必须有alt属性，当图像无法显示的时候该属性很重要</p><p>7.避免长行代码</p><p>8.空行和缩进（不要使用无理由的空行，要注意缩进）</p><p>9.h5省略<html>和body</p><p>10.使用小写文件名</p><table><thead><tr><th>2021.8.1</th><th>vue p9</th><th>html  媒体</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java学习四</title>
      <link href="/java%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
      <url>/java%E5%AD%A6%E4%B9%A0%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>不学习的好处</title>
      <link href="/%E4%B8%8D%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
      <url>/%E4%B8%8D%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="不学习的好处"><a href="#不学习的好处" class="headerlink" title="不学习的好处"></a>不学习的好处</h2><ul><li>不用动脑</li><li>可以刷剧</li><li>可以睡觉</li><li>可以刷视频</li><li>可以看微博</li><li>可以吃东西</li><li>可以玩游戏</li><li>不用假装学习很累</li><li>啊啊啊啊，你就是一个废物，垃圾玩意，叫你学习就跟个傻逼一样想做这做哪，傻逼玩意，自己是个废物还不允许别人说，傻逼玩意。</li><li>不学习就是个傻逼</li><li>学习使我快乐</li><li>嘤嘤嘤 我爱JavaScript 我爱html </li><li>王元红yyds  </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java学习三</title>
      <link href="/java%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
      <url>/java%E5%AD%A6%E4%B9%A0%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h2><p>第一个构造函数使用当前时间和日期来初始化对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date()</span><br></pre></td></tr></table></figure><p>第二个构造函数接收一个函数，该函数是从1970年1月1日起的毫秒数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date(long millisec)</span><br></pre></td></tr></table></figure><h2 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h2><p>java中获取当前日期和时间，都会用Date对象的toString（）方法来打印当前日期和时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Date;</span><br><span class="line">public class DateDemo&#123;</span><br><span class="line">Date date=new Date();</span><br><span class="line">使用toString()函数显示日期时间</span><br><span class="line">System.out.println(date.toString())；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Wed Jul 21 10:44:12 CST 2021</p><h4 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h4><ul><li>使用getTime()方法获取两个日期（自1970年1月1日），然后比较这两个值</li><li>使用before（），after()和equal()。例如一个月的12号比18号早 ，则new Date(99,2,12)before(new Date(99,2,18))返回true</li><li>使用compareTo()方法，它是由comparable接口定义的，Date类实现了这个接口。</li></ul><h2 id="使用simpleDateFormat格式化日期"><a href="#使用simpleDateFormat格式化日期" class="headerlink" title="使用simpleDateFormat格式化日期"></a>使用simpleDateFormat格式化日期</h2><p>simpleDateFormat是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormate允许你选择任何用户自定义日期时间啦运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Date;</span><br><span class="line">import java.text.*;</span><br><span class="line">public class DateDemo&#123;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">        Date date=new Date();</span><br><span class="line">        使用toString()函数显示日期时间</span><br><span class="line">        SimpleDateFormat ft=new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm-ss&quot;);</span><br><span class="line">        System.out.println(&quot;当前时间为&quot;+ft.format(date))；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前时间为2021-07-21 10:56:26</p><h5 id="使用printf格式化日期。"><a href="#使用printf格式化日期。" class="headerlink" title="使用printf格式化日期。"></a>使用printf格式化日期。</h5><p>使用两个字母格式，它以%t开头并且以下面表格中的一个字母结尾</p><table><thead><tr><th>转换符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td><td>星期一 十月 27 14:21:20 CST 2021</td></tr><tr><td>F</td><td>“年-月-日”格式</td><td>2021-7-21</td></tr><tr><td>D</td><td>“月、日/年”格式</td><td>10/21/2021</td></tr><tr><td>r</td><td>“HH:MM:SS PM”格式</td><td>14:28:36下午</td></tr><tr><td>T</td><td>“HH:MM:SS”格式””</td><td>14:28:36</td></tr><tr><td>R</td><td>“HH:MM”格式</td><td>14:22</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Date;</span><br><span class="line"> </span><br><span class="line">public class DateDemo &#123;</span><br><span class="line"> </span><br><span class="line">  public static void main(String args[]) &#123;</span><br><span class="line">     // 初始化 Date 对象</span><br><span class="line">     Date date = new Date();</span><br><span class="line"> </span><br><span class="line">     //c的使用  </span><br><span class="line">    System.out.printf(&quot;全部日期和时间信息：%tc%n&quot;,date);          </span><br><span class="line">    //f的使用  </span><br><span class="line">    System.out.printf(&quot;年-月-日格式：%tF%n&quot;,date);  </span><br><span class="line">    //d的使用  </span><br><span class="line">    System.out.printf(&quot;月/日/年格式：%tD%n&quot;,date);  </span><br><span class="line">    //r的使用  </span><br><span class="line">    System.out.printf(&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;,date);  </span><br><span class="line">    //t的使用  </span><br><span class="line">    System.out.printf(&quot;HH:MM:SS格式（24时制）：%tT%n&quot;,date);  </span><br><span class="line">    //R的使用  </span><br><span class="line">    System.out.printf(&quot;HH:MM格式（24时制）：%tR&quot;,date);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java休眠（sleep"><a href="#java休眠（sleep" class="headerlink" title="java休眠（sleep)"></a>java休眠（sleep)</h2><p>sleep()使当前线程进入停滞状态，让出CPU的使用，目的是不让当前线程独自霸占该进程所获得CPU资源，以留一定时间给其他线程机会执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*</span><br><span class="line"></span><br><span class="line">public class DemoSleep&#123;</span><br><span class="line">public static void main(String agrs[])&#123;</span><br><span class="line">try&#123;</span><br><span class="line">System.out.println(new Date()+&quot;\n&quot;);</span><br><span class="line">Thread.sleep(1000*3);</span><br><span class="line">System.out.println(new Date()+&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;catch&#123;</span><br><span class="line">System.out.println(&quot;Got an exception!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p>Calendar类比Date类强大，可以在日期上加上或者减去值</p><p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p><h6 id="创建一个代表系统当前日期的Calendar对象"><a href="#创建一个代表系统当前日期的Calendar对象" class="headerlink" title="创建一个代表系统当前日期的Calendar对象"></a>创建一个代表系统当前日期的Calendar对象</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar C=Calendar.getInstance();//默认是当前日期</span><br></pre></td></tr></table></figure><h6 id="创建一个指定日期的Calendar对象"><a href="#创建一个指定日期的Calendar对象" class="headerlink" title="创建一个指定日期的Calendar对象"></a>创建一个指定日期的Calendar对象</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建一个代表2009年6月12日的Canlendar对象</span><br><span class="line">Calendar C=Calendar.getInstance();</span><br><span class="line">c1.set(2009,6-1,12);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Calendar类对象信息的获得"><a href="#Calendar类对象信息的获得" class="headerlink" title="Calendar类对象信息的获得"></a>Calendar类对象信息的获得</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line">// 获得年份</span><br><span class="line">int year = c1.get(Calendar.YEAR);</span><br><span class="line">// 获得月份</span><br><span class="line">int month = c1.get(Calendar.MONTH) + 1;</span><br><span class="line">// 获得日期</span><br><span class="line">int date = c1.get(Calendar.DATE);</span><br><span class="line">// 获得小时</span><br><span class="line">int hour = c1.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">// 获得分钟</span><br><span class="line">int minute = c1.get(Calendar.MINUTE);</span><br><span class="line">// 获得秒</span><br><span class="line">int second = c1.get(Calendar.SECOND);</span><br><span class="line">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span><br><span class="line">int day = c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习2</title>
      <link href="/Java%E5%AD%A6%E4%B9%A02/"/>
      <url>/Java%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jav学习2"><a href="#jav学习2" class="headerlink" title="jav学习2"></a>jav学习2</h1><ol><li><h3 id="java学习之-String类"><a href="#java学习之-String类" class="headerlink" title="java学习之 String类"></a>java学习之 String类</h3><ul><li><p>创建字符串</p><p>String str=”xiaoyyya”;</p><p>用构造函数创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str2=new String(&quot;xiaoyyya&quot;);</span><br></pre></td></tr></table></figure></li><li><p>字符串长度</p><p>String site=”xiaoyyya”;</p><p>int len=site.length();</p><p>System.out.println(“xiaoyyya的长度”+len);</p></li><li><p>连接字符串</p><p>string1.contact（string2）；</p><p>string1+string2</p></li></ul></li><li><h2 id="java学习之StringBuffer"><a href="#java学习之StringBuffer" class="headerlink" title="java学习之StringBuffer"></a>java学习之StringBuffer</h2><p>当对字符串进行修改的时候，需要使用stringBuffer和stringBuilder类。</p><p>和string类不同的是，stringbuffer和stringbuilder类对象能够多次修改，并且不产生新的为使用对象。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class RunoobTest&#123;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">StringBuilder sb=new StringBuilder(10);</span><br><span class="line">sb.append(&quot;xiaoyyya&quot;);</span><br><span class="line">sb.append(&quot;!&quot;);</span><br><span class="line">sb.insert(8,&quot;java&quot;);</span><br><span class="line">sb.delete(5,8);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public StringBuffer append(String s)<br>将指定的字符串追加到此字符序列。</p><p>public StringBuffer reverse()<br> 将此字符序列用其反转形式取代。</p><p>public delete(int start, int end)<br>移除此序列的子字符串中的字符。</p><p> public insert(int offset, int i) </p><p>将 <code>int</code> 参数的字符串表示形式插入此序列中。</p><p> replace(int start, int end, String str) </p><p>使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</p><h2 id="3-java-数组"><a href="#3-java-数组" class="headerlink" title="3.java 数组"></a>3.java 数组</h2><h5 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h5><p>dataType[] arrayRefvar;</p><p>eg: double[] myList;</p><h5 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h5><p>arraRefVar= new dataType[arraySize];</p><p>dataType[] arrayRefVar=new dataType[arraySize];</p><p>int size=10;</p><p>double[] myList=new double[size];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double[] myList=&#123;1,5,6,5.9&#125;;</span><br><span class="line">double sum=0;</span><br><span class="line">for(int i=0;i&lt;myList.length;i++)&#123;</span><br><span class="line">sum+=myList[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="for-Each循环"><a href="#for-Each循环" class="headerlink" title="for-Each循环"></a>for-Each循环</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(type element:array)&#123;</span><br><span class="line"></span><br><span class="line">​System.out.println(element);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java运算符</title>
      <link href="/java%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/java%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="java运算符"><a href="#java运算符" class="headerlink" title="java运算符"></a>java运算符</h2><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h6 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h6><p>+、-、*、/、%、++、–</p><p>++a,–a:先进行自增或自减运算，在进行表达式运算</p><p>a++、a–：先进行表达式运算，在进行自增或者自减运算</p><h6 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h6><p>==、！=、&gt;、&lt;、&gt;=、&lt;=</p><h6 id="3-位运算符"><a href="#3-位运算符" class="headerlink" title="3.位运算符"></a>3.位运算符</h6><p>java定义了位运算符，应用于整数类型（int),长整型，短整型，字符型，和字节型等类型。</p><p>位运算符作用在所有位上，并且按位运算，假设a=60,b=13他们的二进制表示如下：</p><p>A=00 11 1100</p><p>B=0000 1101</p><p>a&amp;b=0000 11 00 (11为1)</p><p>a|b=0011 11 01（00为0）</p><p>a^b=0011 0001（对应位相同就是0，不同为1）</p><p>~A=1100 0011（按位取反）</p><p>&lt;&lt;按位左移运算符 A&lt;&lt;2得到 1111 00 00</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;按位右移 A&gt;&gt;2 得到 00001111</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h6><p>&amp;&amp;、||、!</p><h6 id="5-赋值运算符"><a href="#5-赋值运算符" class="headerlink" title="5.赋值运算符"></a>5.赋值运算符</h6><p>=:右边操作数的值赋给左边操作数</p><p>+=,加和赋值操作，左边操作数+右边操作数赋值给左边</p><p>-=：减和赋值操作，左边操作数减去右边赋值给左边</p><p>*=：乘和操作，左边乘以右边赋值给左边</p><p>/=：除和操作，左边除以右边赋值给左边</p><p>(%)=：取模和赋值操作符，左边和右边取模赋值给左边 C%=A等价C=C%A</p><p>&lt;&lt;=：左移位赋值操作符，C&lt;&lt;=2等价C=C&lt;&lt;2</p><p>,&gt;&gt;=,</p><p>&amp;=:按位与赋值操作符 C&amp;=等价于C=C&amp;2</p><p>^=:a按位异或操作符 C^=2等价于C=C^2</p><p>|=:按位或操作符 C|=2等价于 C=C|2</p><h6 id="6-条件运算符（？：）"><a href="#6-条件运算符（？：）" class="headerlink" title="6.条件运算符（？：）"></a>6.条件运算符（？：）</h6><p>​    条件运算符也成为三元运算。该运算符有三个操作数，并且需要判断布尔表达式的值，改运算符的主要是决定那个值应该赋值给变量。</p><p>​    variable x=(expresion )?value if true:value if false</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public static void main(String args)&#123;</span><br><span class="line">int a,b;</span><br><span class="line">a=10;</span><br><span class="line">b=(a==1)?20:30;</span><br><span class="line"></span><br><span class="line">system.out.print(&quot;value of b is&quot;+b);</span><br><span class="line"></span><br><span class="line">b=(a==10)?20:30;</span><br><span class="line">system.out.print(&quot;value of b is&quot;+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="7-instanceof-运算符"><a href="#7-instanceof-运算符" class="headerlink" title="7.instanceof 运算符"></a>7.instanceof 运算符</h6><p>​    该运算符用于操作对象实例，检查改对象是否是一个特定类型（类类型或者接口类型）</p><p>​    instanceof运算符使用格式：</p><p>​            （Object reference variable) instanceof (class\interface type)</p><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = &quot;James&quot;;</span><br><span class="line">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java学习</title>
      <link href="/java%E5%AD%A6%E4%B9%A0/"/>
      <url>/java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java修饰符"><a href="#java修饰符" class="headerlink" title="java修饰符"></a>java修饰符</h1><h2 id="1-访问控制修饰符"><a href="#1-访问控制修饰符" class="headerlink" title="1.访问控制修饰符"></a>1.访问控制修饰符</h2><ol><li><p>​    default(默认，什么也不写)：同一包内课件，不适用任何修饰符。使用对象类，接口，变量，方法</p></li><li><p>private：同一类里面可见，使用对象：变量，方法</p></li><li><p>public：所有类可见。适用对象：类，接口，变量，方法</p></li><li><p>protected:对同一包内的类和所以之类可见。适用对象：变量，方法。</p></li></ol><table><thead><tr><th align="left">修饰符</th><th>当前类</th><th>同一包内</th><th>子孙类（统一包</th><th>子孙类（不同包</th><th>其他包</th></tr></thead><tbody><tr><td align="left">public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td align="left">protected</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td align="left">default</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td align="left">private</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><h6 id="默认访问修饰符-不使用任何字"><a href="#默认访问修饰符-不使用任何字" class="headerlink" title="默认访问修饰符-不使用任何字"></a>默认访问修饰符-不使用任何字</h6><p>​    使用默认修饰符声明的变量和方法，对于同一个包内是可见的。接口里面的变量都是隐式声明为public static final，而接口里面的方法默认情况下访问权限是public。</p><p>​    eg:变量和方法声明可以不使用任何修饰符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String version=&quot;1.5.1&quot;;</span><br><span class="line">boolean processionOder()&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="私有访问修饰符-private"><a href="#私有访问修饰符-private" class="headerlink" title="私有访问修饰符-private"></a>私有访问修饰符-private</h6><p>私有访问修饰符是最严格的访问级别，所以声明为private的方法，变量和构造方法只能被所属类访问，并且类接口不能声明为private。</p><p>声明为私有的类型只能通过共有类中的getter方法被外部使用。</p><h6 id="共有访问修饰符-public"><a href="#共有访问修饰符-public" class="headerlink" title="共有访问修饰符-public"></a>共有访问修饰符-public</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String [] args)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java中main()是公有的，否则Java解释器将不能运行该类</p><h6 id="受保护的访问修饰符-protected"><a href="#受保护的访问修饰符-protected" class="headerlink" title="受保护的访问修饰符-protected"></a>受保护的访问修饰符-protected</h6><ul><li>子类和基类在一个包里面：声明为protected的变量，方法和构造器能被同一个包里面的其他类访问</li><li>子类和基类不在一个包里面：那么子类中，子类实例可以访问其积累继承的protected方法，而不能访问基类实例的protected方法。</li></ul><h6 id="访问继承和控制"><a href="#访问继承和控制" class="headerlink" title="访问继承和控制"></a>访问继承和控制</h6><ul><li>父类中声明为public的方法在子类中也必须为public</li><li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public，不能声明为private。</li><li>父类中的private方法不能被继承</li></ul><h2 id="2-非访问修饰符"><a href="#2-非访问修饰符" class="headerlink" title="2.非访问修饰符"></a>2.非访问修饰符</h2><ul><li><p>static修饰符</p><ul><li>静态变量：static关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。静态变量为常量，局部变量不能被声明为static变量。‘</li><li>静态方法：static关键字用来声明独立于对象的静态方法，静态方法不能使用类的非静态变量，静态方法从参数列表得到数据，然后计算这些数据。</li></ul></li><li><p>final修饰符</p><ul><li><p>final变量：final表示“最后的，最终的”的含义，变量一旦赋值后，不能被重修赋值，被final修饰的实例变量必须显式指定初始值。</p><p>final修饰符通常和static 一起使用来创建类常量。</p></li><li><p>final方法：父类中的final方法可以被子类继承，不能被子类重写。</p><ul><li><p>声明final方法的主要目的是防止该方法的内容被修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">public fianl void changName()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>final类：不能被继承，没有类能够继承final类的任何特殊性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final class Test&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="abstract-修饰符"><a href="#abstract-修饰符" class="headerlink" title="abstract 修饰符"></a>abstract 修饰符</h3><ul><li><p>​    抽象类：</p><p>​    抽象类不能用来实例化对象，声明抽象类的唯一目的是为了用来将来对该类进行扩充。</p><p>​    一个类不能同时被abstract 和final 修饰 。</p></li><li><p>抽象 方法</p><p>​    抽象方法是一种没有实现的方法，该方法的具体实现有子类提供。</p><p>​    任何继承抽象类的子类必须实现弗雷的所有抽象方法，除非给子类也是抽象类</p><p>​    如果一个类包含了若干个抽象方法，那么该类必须声明为抽象类，抽象类可以不包含抽象方法。</p><p>​    抽象方法的声明以分号结尾，例如：**public abstract sample();**。</p></li></ul></li><li><h3 id="synchronized-修饰符"><a href="#synchronized-修饰符" class="headerlink" title="synchronized 修饰符"></a>synchronized 修饰符</h3></li><li><h3 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h3></li><li><h3 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h3></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word使用</title>
      <link href="/%E4%BD%BF%E7%94%A8/"/>
      <url>/%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="标题的使用"><a href="#标题的使用" class="headerlink" title="标题的使用"></a>标题的使用</h1><ol><li>选择列表级别</li><li>定义新的多级列表</li><li>将级别列表链接到样式，选择标题</li><li>鼠标移至标题，点击修改，调整标题的字体和字号</li><li>需要导入目录的，回车下一行，插入分页符</li><li>双击页脚位置，就到了设计，将链接到前一节取消，并将起始页设为1</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试</title>
      <link href="/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
      <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><h3 id="页面内容方面"><a href="#页面内容方面" class="headerlink" title="页面内容方面"></a>页面内容方面</h3><p>1.通过文件合并，css雪碧图，避免使用base64等方式减少http请求，避免过多请求造成等待；</p><p>2.通过DNS缓存机制来减少DNS的查询次数</p><p>3.通过设置缓存策略，对常用的不变资源进行缓存；</p><p>4.通过延迟加载的方式，来减少页面首屏加载时需要请求的资源，延迟加载资源当用户需要访问时再去加载；</p><p>5.通过用户行为，对某些资源使用预加载的方式，提提高用户需要访问资源时的响应速度</p><h3 id="服务器方面"><a href="#服务器方面" class="headerlink" title="服务器方面"></a>服务器方面</h3><p>1.使用CDN服务提高用户对于资源请求时的响应速度</p><p>2.服务器端自用Gzip，Deflate等方式对于传输资源进行压缩，减少传输文件的体积</p><p>3.尽可能减小cookie的大小，并且通过将静态资源分配到其他域名下来避免静态资源请求时携带不必要的cookie</p><h1 id="什么是webp"><a href="#什么是webp" class="headerlink" title="什么是webp"></a>什么是webp</h1><p>webp是谷歌开发啊的一种新的突破屙屎，它支持有损和无损压缩，使用直接色的点阵图，体积更小</p><h3 id="浏览器如何判断是否支持webp"><a href="#浏览器如何判断是否支持webp" class="headerlink" title="浏览器如何判断是否支持webp?"></a>浏览器如何判断是否支持webp?</h3><p>通过创建image对象，将其src属性设置成webp格式图片，然后onload事件中获取图片宽高，假如可以获取，就是支持，不能获取就是不能支持</p><h1 id="常见浏览器内核"><a href="#常见浏览器内核" class="headerlink" title="常见浏览器内核"></a>常见浏览器内核</h1><p>Trident:IE浏览器</p><p>Gecko:firefox浏览器内核</p><p>Presto:Opera浏览器内核</p><p>Webkit:Safari浏览器</p><p>Blink;谷歌</p><p>UC：webkit+trident</p><p>百度，世界之窗：IE</p><p>搜狗，QQ浏览器：webkit+trident</p><p>360,猎豹：IE+blink</p><h1 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h1><p>BFC（BLOCK FORMAT Context)块级格式化上下文，是页面盒模型中的一种CSS渲染模式，相当于一个独立的容器，里面的元素和外部的互不影响</p><p>创建BFC的方式有：html根元素，float浮动，绝对定位，overflow不为visible,display为表格布局或者弹性布局</p><p>BFC作用:清楚浮动，防止同一BFC容器中的相邻元素和外边距重叠</p><h2 id="如何让一个div水平垂直居中？"><a href="#如何让一个div水平垂直居中？" class="headerlink" title="如何让一个div水平垂直居中？"></a>如何让一个div水平垂直居中？</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div.parent&#123;display:flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">aligen-items: center;</span><br><span class="line">&#125;</span><br><span class="line">div.parent&#123;</span><br><span class="line">position:relative;</span><br><span class="line">&#125;</span><br><span class="line">div.child&#123;</span><br><span class="line">position:absolute;</span><br><span class="line">left:50%;</span><br><span class="line">top:50%;</span><br><span class="line">transform: translate(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重绘和回流（Repaint、Reflow-以及如何进行优化"><a href="#重绘和回流（Repaint、Reflow-以及如何进行优化" class="headerlink" title="重绘和回流（Repaint、Reflow)以及如何进行优化"></a>重绘和回流（Repaint、Reflow)以及如何进行优化</h2><h4 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h4><ol><li><p>浏览器采用流式布局模式（flow based layout)</p></li><li><p>浏览器会把HTML解释成Dom,把css解释成cssom，dom和cssom合并产生了渲染树</p></li><li><p>有了renderTree,我们就知道了所有节点的样式，然后后计算他们再页面上的大小和位置，最后把节点绘制到页面上</p></li><li><p>由于浏览器使用流式布局，对于render tree的计算通常只需遍历一次，但是table以及内部元素可能需要重复计算，这也是避免table布局的原因</p><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p>由于节点的集合属性发生变化或者样式改变而不会影响布局的。称为重绘。</p><h4 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h4><p>回流就是布局或者集合属性需要改变称为回流。回流是影响浏览器性能的主要原因，因为他的变化会涉及到部分页面的布局更新。一个元素回流可能会造成其子元素以及dom中紧随其后的系欸但的重绘。回流必重绘，重绘不一定引发回流。</p><h4 id="浏览器优化"><a href="#浏览器优化" class="headerlink" title="浏览器优化"></a>浏览器优化</h4><p>现在浏览器多使用队列机制来批量更新布局，浏览器会把修改操作放在队列里，至少一个浏览器刷新（16.6ms）才会清空队列。但是获取布局信息的时候，队列中肯会有影响这些属性或者方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流和重绘来确保返回值的正确性。</p><h4 id="减少重绘和回流"><a href="#减少重绘和回流" class="headerlink" title="减少重绘和回流"></a>减少重绘和回流</h4><ol><li><h6 id="css"><a href="#css" class="headerlink" title="css"></a>css</h6><ul><li>使用transform代替top;</li><li>使用visibility替换display: none,前者引起重绘，后者引起回流</li><li>避免使用table布局</li><li>尽可能正在DOM树末端改变class</li><li>css硬件加速</li><li>避免使用css表达式</li></ul></li><li><p>javascript</p><p>​    避免频繁操作样式，修改class最好</p><p>​    避免频繁操作DOM，合并多次修改为一次</p><p>避免频繁读取引发回流、重绘属性，将结果缓存</p><p>​    对复杂动画使用绝对定位，使它脱离文档流</p><p>​    </p></li></ol></li></ol><h2 id="比较分析opacity-0、visibility-hidden、display-none优劣和适用场景"><a href="#比较分析opacity-0、visibility-hidden、display-none优劣和适用场景" class="headerlink" title="比较分析opacity:0、visibility:hidden、display:none优劣和适用场景"></a>比较分析opacity:0、visibility:hidden、display:none优劣和适用场景</h2><p>1.display:none 不占用空间、不能点击，会引起回流，子元素不影响</p><p>2.visibility: hidden 占据空间，不能点击，会引起重绘，子元素可设置visible进行显示</p><p>3.opacity:0 占据空间，可以点击，引起重绘，子元素不影响</p><h2 id="简单描述css盒模型"><a href="#简单描述css盒模型" class="headerlink" title="简单描述css盒模型"></a>简单描述css盒模型</h2><p>盒子由margin,border,padding,content组成</p><p>标准盒模型：box-sizing:content-box</p><p>IE盒模型：box-sizing:border-box</p><h2 id="简述Rem以及转换原理"><a href="#简述Rem以及转换原理" class="headerlink" title="简述Rem以及转换原理"></a>简述Rem以及转换原理</h2><p>rem是css3的相对长队单位，是指相对于根元素html的font-size计算大小。</p><p>默认根元素的font-size都是16px,假如像设置12px的字体大小也就是12px/16px=0.75rem.</p><ul><li>由于px是相对固定单位，字号大小直接被锁定，无法随着浏览器进行缩放</li><li>rem直接相对于根元素html,避开层级关系，移动端新型浏览器对其支持较好</li></ul><h2 id="简单描述伪类和伪元素"><a href="#简单描述伪类和伪元素" class="headerlink" title="简单描述伪类和伪元素"></a>简单描述伪类和伪元素</h2><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><p>伪类用于当前已有元素处于某种状态时，为其添加对应的样式，这个状态时根据用户行为变化而变化的，比如说：hover.他只有处于DOM树无法描述的状态才能为元素添加样式，所以称为伪类。</p><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>伪元素用于创建一些原本不在文档树中的元素，并为其添加样式，比如：：：before。虽然用户可以看见这些内容，但是他不在文档树中</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>伪类的操作对象是文档树中已存在元素，而伪元素时创建一个文档树外的元素、</p><p>CSS中：：表示伪元素，：表示伪类</p><h2 id="行内元素的margin和padding"><a href="#行内元素的margin和padding" class="headerlink" title="行内元素的margin和padding"></a>行内元素的margin和padding</h2><ul><li>水平方向：水平方向上有效</li><li>垂直方向：垂直方向上，都无效。（<code>padding-top</code> 和 <code>padding-bottom</code> 会显示出效果，但是高度不会撑开，不会对周围元素有影响）</li></ul><h2 id="css中哪些属性可以继承"><a href="#css中哪些属性可以继承" class="headerlink" title="css中哪些属性可以继承"></a>css中哪些属性可以继承</h2><p>1.字体系列属性</p><ul><li>font-size</li><li>font-family</li><li>font-weight</li><li>font-style</li></ul><p>2.文本系列属性</p><ul><li>text-indent</li><li>text-aligen</li><li>line-hight</li><li>word-spacing</li><li>letter-spacing</li><li>color</li></ul><p>其他</p><ul><li>cursor</li><li>visibility</li></ul><h2 id="用纯CSS创建一个三角形"><a href="#用纯CSS创建一个三角形" class="headerlink" title="用纯CSS创建一个三角形"></a>用纯CSS创建一个三角形</h2><p>#demo{</p><p>​    width: 0;</p><p>​    height: 0;</p><p>​    border-width: 20;</p><p>​    border-style: “solid”;</p><p>​    border-color: transparent transparent red transparent;</p><p>}</p><h2 id="min-width、max-width和min-height-max-height属性覆盖规则"><a href="#min-width、max-width和min-height-max-height属性覆盖规则" class="headerlink" title="min-width、max-width和min-height\max-height属性覆盖规则"></a>min-width、max-width和min-height\max-height属性覆盖规则</h2><p>1.max-width会覆盖width,即使width时行内样式或者设置了！import</p><p>2.min-width会覆盖max-width。</p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><h2 id="介绍下-Set、Map、WeakSet-和-WeakMap-的区别？"><a href="#介绍下-Set、Map、WeakSet-和-WeakMap-的区别？" class="headerlink" title="介绍下 Set、Map、WeakSet 和 WeakMap 的区别？"></a>介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h2><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><ol><li>成员不能重复</li><li>只有键值，没有键名，类似数组</li><li>可以遍历，有add,delete,has</li></ol><h4 id="Weakset"><a href="#Weakset" class="headerlink" title="Weakset"></a>Weakset</h4><ol><li>成员都是对像</li><li>成员都是弱引用，随时可以小时。可以用来保存DOM节点，不容易造成内存泄露</li><li>不能遍历，有啊大大，delete，哈桑，方法</li></ol><h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><ol><li><p>​    只接受对象为键名，null除外，不能接受其他类型的值作为键名</p></li><li><p>键名指向对象，不计入垃圾回收机制</p></li><li><p>不能遍历 方法get,set,has,delete</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ol><li>键值对集合，类似于集合</li><li>可以遍历</li></ol></li></ol><h1 id="ES5-ES6-的继承除了写法以外还有什么区别？"><a href="#ES5-ES6-的继承除了写法以外还有什么区别？" class="headerlink" title="ES5/ES6 的继承除了写法以外还有什么区别？"></a>ES5/ES6 的继承除了写法以外还有什么区别？</h1><ol><li>class声明会提升，但不会初始化复制</li><li>class声明内部启用严格模式</li><li>class的所有方法都是不可枚举</li><li>class的所有方法都是没有原型prototype，不能用new来调用</li><li>必须使用new来调用class</li><li>class内部无法重写类名</li></ol><h1 id="JS-异步解决方案的发展历程以及优缺点。"><a href="#JS-异步解决方案的发展历程以及优缺点。" class="headerlink" title="JS 异步解决方案的发展历程以及优缺点。"></a>JS 异步解决方案的发展历程以及优缺点。</h1><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>优点：解决了同步问题</p><p>缺点：回调地狱，并不能使用 try catch捕获错误，不能return</p><h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><p>优点：解决了回调地狱的问题</p><p>缺点：无法取消promise，错误需要通过回调函数来捕获</p><h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><p>特点：可以控制函数执行</p><h4 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h4><p>优点：代码清晰，不用像promise一样写一大堆then链，解决了回调地狱问题</p><p>缺点：await将一部代码改造成同步代码，假如多个异步操作没有依赖而使用await会导致性能低。</p><h2 id="实现一个sleep函数"><a href="#实现一个sleep函数" class="headerlink" title="实现一个sleep函数"></a>实现一个sleep函数</h2><p>//promise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function sleep1(time)&#123;</span><br><span class="line">return new Promise(resovle=&gt;&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">resovle();</span><br><span class="line">&#125;,time);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep1(1000).then(()=&gt;console.log(&quot;sleep1&quot;));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">某公司 1 到 12 月份的销售额存在一个对象里面 如下：&#123;1:222, 2:123, 5:888&#125;，请把数据处理为如下结构：[222, 123, null, null, 888, null, null, null, null, null, null, null]</span><br><span class="line"></span><br><span class="line">function convert(obj)&#123;</span><br><span class="line">return Array.from(&#123;length:12&#125;).map((item,index)=&gt;obj[index]||null).slice(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="call-和-apply-的区别是什么，哪个性能更好一些"><a href="#call-和-apply-的区别是什么，哪个性能更好一些" class="headerlink" title="call 和 apply 的区别是什么，哪个性能更好一些"></a>call 和 apply 的区别是什么，哪个性能更好一些</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>Function.prototype.apply</code> 和 <code>Function.prototype.call</code> 的作用是一样的，区别在于传入参数的不同；</li></ol><p>2.第一个参数都是指定函数体内this的指向</p><p>3.第二个参数开始不同，applay是传入带下标的集合，数组或者类数组apply把它传给函数作为参数，call从第二个参数开是是不固定的，都会传给函数作为参数</p><p>4.call比apply性能好一些</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL基本命令</title>
      <link href="/SQL%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/SQL%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><p>模式的定义删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">为用户WANG定义一个学生-课程模式 S-T</span><br><span class="line">create schema &quot;S-T&quot; AUTHORIZATION WANG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为用户ZHANG创建一个模式TEST，并且在其中定义一个表</span><br><span class="line">Create SCHEMA TEST AUTHORIZATION ZHANG</span><br><span class="line">CREATE TABLE tab1(COL1 SAMLLINT,</span><br><span class="line">COL2 INT,</span><br><span class="line">COL3 CHAR(20),</span><br><span class="line">COL4 NUMERIC(10,3),</span><br><span class="line">COL5 DECIMAL(5,2));</span><br><span class="line"></span><br><span class="line">DROP SCHEMA&lt;模式名&gt;&lt;CASCADE|RESTRICT&gt;</span><br><span class="line">CASCADE联级，删除模式的同时删除和模式相关联的数据库对象</span><br><span class="line"></span><br><span class="line">RESTRICT限制 ，如果该模式有其他相关联的数据库对象，则拒绝执行</span><br><span class="line"></span><br><span class="line">删除模式ZAHNG</span><br><span class="line">DROP SCHAME ZHANG CASCADE</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基本表的定义，修改、删除"><a href="#基本表的定义，修改、删除" class="headerlink" title="基本表的定义，修改、删除"></a>基本表的定义，修改、删除</h1><p>CREATE TABLE &lt;表名&gt;（列名，数据类型，约束条件，</p><p>​                                            列名，数据类型，</p><p>​                                            。。。。。，）；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">创建一个“学生”STUDENT表，学号是主键，姓名取值唯一</span><br><span class="line"></span><br><span class="line">CTREATE TABLE STUDENT (Sno CHAR(9) PRIMARY KEY,</span><br><span class="line">Sname Char(20) UNIQUE,</span><br><span class="line">Ssex char(2),</span><br><span class="line">Sage smallint,</span><br><span class="line">sdept char(20));</span><br><span class="line"></span><br><span class="line">创建一个课程表 course</span><br><span class="line">Create table Course(Cno char(4) primary key,</span><br><span class="line">Cname char(10),</span><br><span class="line">Cpno char(4),</span><br><span class="line">Ccredit Smallint ,</span><br><span class="line">foreing key(Cpon) References course(Cno));</span><br><span class="line">/*Cpno是外码</span><br><span class="line">   被参照表是Course</span><br><span class="line">   被参照列是Cno*/</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">创建一个学生选课表SC</span><br><span class="line">create table sc(</span><br><span class="line">sno char(9),</span><br><span class="line">Cno char(10),</span><br><span class="line">Grade smallint,</span><br><span class="line">primary key(sno,Cno),</span><br><span class="line">foreing key (sno) references student(sno),</span><br><span class="line">foreing key (Cno)references Course(Cno)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Alert table&lt;表名&gt;</p><p>ADD 新增列</p><p>DROP COLUMN删除列</p><p>DEROP CONSTRAINT删除指定完整性约束</p><p>ALERT COLUMN用于删除原有的定义，包括修改列名和数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">向Student表新增入学时间 数据类型为日期型</span><br><span class="line"></span><br><span class="line">ALERT TABLE Student ADD S_entrance DATE;</span><br><span class="line"></span><br><span class="line">将年龄的数据类型改成整形</span><br><span class="line">alert table student alert column Sage Int</span><br><span class="line"></span><br><span class="line">增加课程名称必须取唯一的约束条件 </span><br><span class="line">alert table course Add Unique(Cname);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Drop TABLE &lt;表名&gt;（CASCADE|RESTRICT)</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>建立索引的目的：加快查询速度</p><p>谁可以建立索引<br>数据库管理员 或 表的属主（即建立表的人</p><p>Create (UNIQUE|CLUSTER) INDEX&lt;索引名&gt; ON&lt;表名&gt;（列名 次序）；</p><p>&lt;次序&gt;：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASC</p><p>升序：ASC 降序：DESC 缺省值 ASC</p><p>UNIQUE：此索引的每一个索引值只对应唯一的数据记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为学生-课程数据中的STUDENT,Course,SC三个表建立索引，Student按学号升序建立唯一索引，Course表按课程号建立唯一索引，SC表按照学号升序课程号降序建立唯一索引</span><br><span class="line"></span><br><span class="line">Create Unique index Stusno ON STUDENT(Sno);</span><br><span class="line">Create Unique index Coucno ON Course(Cno);</span><br><span class="line">Create Unique index SCno ON SC(Sno ASC,Cno DESC);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询|"></a>数据查询|</h1><p>SELECT ALL|DISTINCT &lt;目标列表表达式&gt;from &lt;表名|视图名&gt;|（select 语句 AS 别名）</p><p>WHERE &lt;条件表达式&gt;</p><p>GROUP BY &lt;列名1&gt;HAVING 条件表达式</p><p>ORDER BY 列名2 ASC|DESC</p><p>SELECT子句：指定要显示的属性列<br>FROM子句：指定查询对象（基本表或视图）<br>WHERE子句：指定查询条件<br>GROUP BY子句：对查询结果按指定列的值分组，该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。<br>HAVING短语：只有满足指定条件的组才予以输出<br>ORDER BY子句：对查询结果表按指定列值的升序或降序排序 </p><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><p>查询全体学生的学号与姓名</p><p>select Sno,Sname from student;</p><p>查询全体学生的姓名、学号、所在系。</p><p>select Sname,Sno,Sdept from student</p><p>查询全体学生的详细记录</p><p>select * from student</p><p>查全体学生的姓名及其出生年份。</p><p>select Sname.2021-Sage from student</p><p>查询全体学生的姓名、出生年份和所在的院系，要求用小写字母表示系名。</p><p>select Sname, 2021-Sage,LOWER(Sdept) from student;</p><p>指定DISTINCT关键词，去掉表中重复的行</p><p>select DISTINCT Sno from Student;</p><p>查询所有姓刘学生的姓名、学号和性别。</p><p>select Sname,Sno,Ssex from Student where Sname like’刘%’；</p><p>查询名字中第2个字为”阳”字的学生的姓名和学号。</p><p>select Sname,Sno from Student where Sname like’_阳%‘；</p><h2 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h2><p>可以按一个或多个属性列排序<br>升序：ASC;降序：DESC;缺省值为升序<br>对于空值，排序时显示的次序由具体系统实现来决定</p><p>查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列。</p><p>select Sno ,Grade from SC where Cn0=’3’ ORDER BY DESC;</p><p>查询全体学生情况，查询结果按所在系的系号升序排列，同一系中的学生按年龄降序排列。</p><p>select * from Student ORDER BY Sdept ASC,Sage DESC;</p><h2 id="聚集函数："><a href="#聚集函数：" class="headerlink" title="聚集函数："></a>聚集函数：</h2><p>统计元组个数 count(*)</p><p>统计一列中值的个数 count(DISTINCT|ALL 列名)</p><p>计算一列值的总和（此列必须为数值型）</p><p>SUM（DISTINCT|ALL 列名)</p><p>计算一列值的平均值：</p><p>AVG（DISTINCT|ALL 列名）</p><p>求一列中最大或者最小值：</p><p>MAX（DISTINCT|ALL 列名）</p><p>MIN(DISTINCT |ALL 列名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查询学生总人数。</span><br><span class="line">select count(*)from student;</span><br><span class="line">查询选修了课程的学生人数</span><br><span class="line">select count(DISTINCT Sno) from SC;</span><br><span class="line">计算1号课程的学生平均成绩。</span><br><span class="line">select AVG(Grade) from SC where Cno=&#x27;1&#x27;;</span><br><span class="line">查询选修1号课程的学生最高分数。</span><br><span class="line">select Max(Grade)from sc where Cno=&#x27;1&#x27;;</span><br><span class="line">查询学生201215012选修课程的总学分数。</span><br><span class="line">select SUM(Scredict) from SC,Course where Sno=&#x27;201215012&#x27; and SC.Cno=Couse.Cno;</span><br></pre></td></tr></table></figure><h2 id="GROUP-BY子句分组："><a href="#GROUP-BY子句分组：" class="headerlink" title="GROUP BY子句分组："></a>GROUP BY子句分组：</h2><p>​     细化聚集函数的作用对象<br> 如果未对查询结果分组，聚集函数将作用于整个查询结果<br> 对查询结果分组后，聚集函数将分别作用于每个组<br>按指定的一列或多列值分组，值相等的为一组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">求各个课程号及相应的选课人数。</span><br><span class="line">select Cno,Count(Sno) from Student,Course Group by Cno</span><br><span class="line">查询选修了3门以上课程的学生学号。</span><br><span class="line">select Sno from SC Group by(Sno) having count(*)&gt;3</span><br><span class="line"></span><br><span class="line">因为WHERE子句中是不能用聚集函数作为条件表达式</span><br><span class="line">查询平均成绩大于等于90分的学生学号和平均成绩</span><br><span class="line">select Sno ,AVG(Grade) from sc group by Sno having Avg(Grade)&gt;90;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HAVING短语与WHERE子句的区别：<br>作用对象不同<br>WHERE子句作用于基表或视图，从中选择满足条件的元组<br>HAVING短语作用于组，从中选择满足条件的组。</p><p>查询每个学生及其选修课程的情况<br>                 SELECT  Student.<em>, SC.</em><br>                 FROM     Student, SC<br>                 WHERE  Student.Sno = SC.Sno;</p>]]></content>
      
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Handler</title>
      <link href="/Handler/"/>
      <url>/Handler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android中的handler</p><p>1.handler的作用和概念</p><p>handler包含了线程队列和消息队列，实现异步消息处理机制。</p><p>a.运行在某个线程上，共享线程的消息队列</p><p>b.接收消息，调度消息，派发消息和处理消息</p><p>c.实现消息异步处理</p><p>handler可以让你发送和处理runnable对象，每个handler对象对应一个Thread和Thread的消息队列。handler创建时，它就自动和Thread和消息队列绑定在一起，然后可以传递消息和runnable对象到消息队列中，执行消息以后退出。</p><p>Handler的作用是调度消息和runnable对象去被执行；使动作在不同的线程中被执行。</p><p><img src="https://images2015.cnblogs.com/blog/464718/201604/464718-20160402145344629-1932461459.jpg" alt="img"></p><p>Android中对消息原型，消息队列，消息发送，消息循环，消息获取，消息派发，消息处理这几个部分进行了抽象，变成了四部分：Handler 、Massage、MassageQueue、Looper</p><p>Massage:消息原型，包含消息描述和数据</p><p>MassageQueue:消息队列</p><p>Looper:完成消息循环</p><p>Handler:驾驭整个消息系统模型，统领Massage,MassageQueue,Looper。</p><p>Handler工作原理：</p><p>sendMessage ：立即发送消息</p><p>sendMessageDelayed：指定多少毫秒后发送消息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android导入工程解决SDK不适配</title>
      <link href="/Android%E5%AF%BC%E5%85%A5%E5%B7%A5%E7%A8%8B%E8%A7%A3%E5%86%B3SDK%E4%B8%8D%E9%80%82%E9%85%8D/"/>
      <url>/Android%E5%AF%BC%E5%85%A5%E5%B7%A5%E7%A8%8B%E8%A7%A3%E5%86%B3SDK%E4%B8%8D%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在学习过程中经常会从网上下载一些开源的代码去学习，这个时候工程和我们所属的环境通常是不适用的。在这里教大家一招解决这个问题。</p><p>解决This version of the Android Support plugin for IntelliJ IDEA (or Android</p><p>SDK不适配等问题</p><p>首先在Android Studio新建一个工程或者使用之前的可以运行的工程，将以下四个文件复制到将要导入的工程中替换掉该工程的这几个文件。</p><p><img src="/Android%E5%AF%BC%E5%85%A5%E5%B7%A5%E7%A8%8B%E8%A7%A3%E5%86%B3SDK%E4%B8%8D%E9%80%82%E9%85%8D/1.png"></p><p><img src="/Android%E5%AF%BC%E5%85%A5%E5%B7%A5%E7%A8%8B%E8%A7%A3%E5%86%B3SDK%E4%B8%8D%E9%80%82%E9%85%8D/2.png"></p><p>然后再打开该工程就可以正确运行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/Docker/"/>
      <url>/Docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程是基于CentOS7上安装和使用docker。本次使用的是在Windows自带的hyper-V中安装CentOS7并创建的虚拟机。</p><p>安装CentOs创建虚拟机教程可查看上一篇：<a href="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/">Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）</a></p><h6 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目前，CentOS 仅发行版本中的内核支持 Docker。</span><br><span class="line">1、Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</span><br><span class="line">2、Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</span><br></pre></td></tr></table></figure><h2 id="1-1查看CentOS内核"><a href="#1-1查看CentOS内核" class="headerlink" title="1.1查看CentOS内核"></a>1.1查看CentOS内核</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 uname -r 命令查看你当前的内核版本</p><p><img src="/Docker/9.png"></p><p><strong>tips</strong>:从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。<br> Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。</p><h2 id="1-2安装与配置"><a href="#1-2安装与配置" class="headerlink" title="1.2安装与配置"></a>1.2安装与配置</h2><h6 id="1-更新-yum-源"><a href="#1-更新-yum-源" class="headerlink" title="1.更新 yum 源"></a>1.更新 yum 源</h6><p>输入以下命令回车执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h6 id="2-安装依赖包"><a href="#2-安装依赖包" class="headerlink" title="2.安装依赖包"></a>2.安装依赖包</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br></pre></td></tr></table></figure><p><img src="/Docker/1.png"></p><h6 id="3-设置阿里云镜像源"><a href="#3-设置阿里云镜像源" class="headerlink" title="3.设置阿里云镜像源"></a>3.设置阿里云镜像源</h6><ul><li>重建 Yum 缓存。</li><li>安装 Docker-CE ，请执行一下命令进行安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h6 id="4-启动-Docker-CE"><a href="#4-启动-Docker-CE" class="headerlink" title="4.启动 Docker-CE"></a>4.启动 Docker-CE</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h6 id="5-镜像加速配置"><a href="#5-镜像加速配置" class="headerlink" title="5.镜像加速配置"></a>5.镜像加速配置</h6><p>这里使用的是 <a href="https://cr.console.aliyun.com/#/accelerator">阿里云提供的镜像加速</a> ，登录并且设置密码之后在左侧容器镜像服务下的镜像加速，如下图三步，</p><p>通过修改daemon配置文件/etc/docker/daemon.json来使用加速器，将步骤三的命令复制到主机命令窗口。</p><p><img src="/Docker/10.png"></p><p><img src="/Docker/4.png"></p><p>之后重新加载配置，并且重启 Docker 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h6 id="6-测试运行-hello-world"><a href="#6-测试运行-hello-world" class="headerlink" title="6.测试运行 hello-world"></a>6.测试运行 hello-world</h6><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/Docker/7.png"></p><p>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行，看到显示Hello from Docker!表示Docker安装启动成功。</p><h6 id="7-查看docker状态"><a href="#7-查看docker状态" class="headerlink" title="7.查看docker状态"></a>7.查看docker状态</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="/Docker/8.png"></p><p>如上图显示的绿色字体，active（runing)表示正在运行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）</title>
      <link href="/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/"/>
      <url>/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程使用的是基于 Hyper-V 的 Hadoop 集群。配置了三台 CentOS 虚拟机，部署 Hadoop-2.7.7。接下来将详细介绍如何进行配置。</p><p>安装包提取地址：链接：<a href="https://pan.baidu.com/s/1kYED6eiV5LZyc9IF0vZfxA">https://pan.baidu.com/s/1kYED6eiV5LZyc9IF0vZfxA</a><br>提取码：y1y2<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p> <b>参考文章：<a href="https://blog.csdn.net/weixin_45921996/article/details/116424548?spm=1001.2014.3001.5501">Hadoop的集群搭建windows基于VMware虚拟机超详细教程（一主二从）</a><br> </b></p><h1 id="一、XSHELL下载与-WinSCP安装"><a href="#一、XSHELL下载与-WinSCP安装" class="headerlink" title="一、XSHELL下载与 WinSCP安装"></a>一、XSHELL下载与 WinSCP安装</h1><pre><code>XShell 下载地址：https://www.netsarang.com/zh/free-for-home-school/WinSCP 下载地址：https://winscp.net/eng/download.php</code></pre><p>XShell 是一个用于远程访问和管理 Linux 的终端工具，<br>WinSCP 也是一个远程管理 Linux 的工具，此处用于 SFTP 文件传输之用。（在下载中选中XSHELL填写姓名邮件即可下载，会通过邮件的方式发送）</p><p>1.为什么要使用xshell呢？因为xshell用来在windows界面下访问远端不同系统下的服务器，从而实现较好地远程控制终端的目的。</p><h1 id="二、在Windows自带的hyper-V中安装CentOS7并创建虚拟机"><a href="#二、在Windows自带的hyper-V中安装CentOS7并创建虚拟机" class="headerlink" title="二、在Windows自带的hyper-V中安装CentOS7并创建虚拟机"></a>二、在Windows自带的hyper-V中安装CentOS7并创建虚拟机</h1><p>打开下载地址: <a href="http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/</a> , 下载 Minimal 镜像。</p><p><img src="https://img-blog.csdnimg.cn/2021050921154729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkyMTk5Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>打开 Hyper-V，创建新的虚拟机</p><p>为了方便管理，我们可以把虚拟机放在另一个位置，并写入名称。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\1.png" alt="1"></p><p>继续下一步，选择第二代。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\2.jpg" alt="2"></p><p>将启动内存设置为2G，即2048MB。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\2.png" alt="3"></p><p>点击下一步</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\3.png" alt="4"></p><p>配置虚拟磁盘的大小，20GB 即可，储存位置默认为上一步骤中我们指定的位置，如无疑问可以不做更改。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\4.jpg" alt="5"><br>配置安装盘并选择之前下载好的 CentOS 7 映像文件。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\4.png" alt="6"></p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\5.png" alt="7"></p><p>点击完成。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\6.png" alt="8"></p><h1 id="三、安装并配置CentOS7"><a href="#三、安装并配置CentOS7" class="headerlink" title="三、安装并配置CentOS7"></a>三、安装并配置CentOS7</h1><h2 id="3-1安装CentOS7"><a href="#3-1安装CentOS7" class="headerlink" title="3.1安装CentOS7"></a>3.1安装CentOS7</h2><p>启动创建好的 CentOS 虚拟机，双击连接。</p><p>启动安装程序，语言选择中文简体</p><p><img src="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/7.png" alt="9"></p><p>点击网络和主机名，配置网络连接。</p><p><img src="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/10.png" alt="11"></p><p>打开网络适配器，并点击配置，添加 IPv4 配置信息，配置如图所示。</p><p>点击完成</p><p><img src="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/9.png" alt="10"></p><p>点击开始安装</p><p><img src="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/11.png" alt="12"><br>安装过程中，我们点击设置 Root 密码。设置完成后，点击完成即可。弱密码需要点击两次完成以确认。</p><p><img src="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/14.png" alt="15"></p><p>安装完成后点击重启，登录使用用户名 root，</p><p>密码为刚才设置的密码，输入密码时不会显示，输入完成后回车确认即可。</p><p><img src="https://img-blog.csdnimg.cn/20210512111842188.png#pic_center" alt="在这里插入图片描述"></p><p>出现下面图片情况，表示登录成功。</p><p><img src="https://img-blog.csdnimg.cn/2021051211191421.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-2配置CentOS"><a href="#3-2配置CentOS" class="headerlink" title="3.2配置CentOS"></a>3.2配置CentOS</h2><h3 id="3-2-1更新一下yum源"><a href="#3-2-1更新一下yum源" class="headerlink" title="3.2.1更新一下yum源"></a>3.2.1更新一下yum源</h3><ol><li><p>更新 yum 源，输入以下命令回车执行：yum -y update</p></li><li><p>关闭防火墙，输入以下命令回车执行：systemctl disable firewalld.service</p></li><li><p>关闭 SELinux，按照下面步骤执行。</p><p>输入命令：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure><p>进入 vi 编辑器修改配置，找到 SELINUX=enforcing，将其更改为 disabled，保存并退出。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\17.png" alt="17"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>vi 编辑器使用帮助<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>vi 编辑器默认为命令模式，在命令模式下，按下 i 表示进入编辑模式。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>编辑完毕后，按 Esc 返回命令模式，然后输入冒号 : ，输入 wq 回车，保存并退出编辑器。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>需要使用和学习Linux常用命令可以转：<a href="https://www.runoob.com/w3cnote/linux-common-command-2.html">Linux 常用命令学习</a></strong></p><p>输入reboot命令回车重启系统，使命令生效。</p><p>重启之后输入/usr/sbin/sestatus -v 查看SELinux是否被禁用</p><h3 id="3-2-1更改主机名称"><a href="#3-2-1更改主机名称" class="headerlink" title="3.2.1更改主机名称"></a>3.2.1更改主机名称</h3><p>由于之前没有自定义主机名称，现在补上为了方便后期管理三台主机，我们可以在这里设置每台主机的主机名称。</p><p>输入命令，将主机设置为 main：</p><p>hostnamectl set-hostname main</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\18.png"></p><h3 id="3-2-3修改hosts文件"><a href="#3-2-3修改hosts文件" class="headerlink" title="3.2.3修改hosts文件"></a>3.2.3修改hosts文件</h3><p>将本机和待会儿两台主机的 IP 地址先写入 hosts 文件，方便后期管理。</p><p>输入以下命令编辑 hosts 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\20.png"></p><p>这里的 y1和 y2 是给其余两台主机起的主机名字，192.168.123.10 是主机 main 的 IP 地址。y1 和 y2 分别为 .11 和 .12，修改完成后保存并退出。</p><h3 id="3-2-4创建HadoopTools文件夹-解压hadoop"><a href="#3-2-4创建HadoopTools文件夹-解压hadoop" class="headerlink" title="3.2.4创建HadoopTools文件夹,解压hadoop"></a>3.2.4创建HadoopTools文件夹,解压hadoop</h3><p>输入以下命令，创建 HadoopTools 文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line"></span><br><span class="line">mkdir HadoopTools</span><br><span class="line"></span><br><span class="line">cd HadoopTools</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 WinSCP 将 Hadoop 安装包上传到 /root/HadoopTools 文件夹</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\21.png"></p><p>然后我们回到虚拟机，用以下命令分别解压2个压缩包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.7.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3-2-5配置JDK"><a href="#3-2-5配置JDK" class="headerlink" title="3.2.5配置JDK"></a>3.2.5配置JDK</h3><p>输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.bash_profile</span><br></pre></td></tr></table></figure><p>将以下内容添加到文件末尾：将下面内容添加到文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/HadoopTools/jdk1.8.0_171</span><br><span class="line">export HADOOP_HOME=/root/HadoopTools/hadoop-2.7.7</span><br><span class="line">export PATH=$PATH:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\23.png"></p><p>保存后，输入以下命令使修改的配置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>然后输入java -version 查看java版本，检验安装是否成功，如果能出现下图所示，即表示配置成功。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\24.png"></p><p>验证完成后，输入 poweroff 关闭 CentOS，准备下一阶段配置。</p><h1 id="四、复制CenyOS主机，搭建集群"><a href="#四、复制CenyOS主机，搭建集群" class="headerlink" title="四、复制CenyOS主机，搭建集群"></a>四、复制CenyOS主机，搭建集群</h1><h2 id="4-1复制虚拟机"><a href="#4-1复制虚拟机" class="headerlink" title="4.1复制虚拟机"></a>4.1复制虚拟机</h2><p>如下图所示，首先选择需要复制的虚拟机，第二步点击导出，第三步选择导出的位置，点击导出。</p><p><img src="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/25.png" alt="img"></p><p>然后选择导入虚拟机。导入时重命名主机为新的名字，例如 y1 或 y2</p><p>导入时，选择导入为新的虚拟机（创建新的唯一 ID），复制第二台虚拟机时同样操作。</p><h2 id="4-2配置主机名称以及主机-IP-信息"><a href="#4-2配置主机名称以及主机-IP-信息" class="headerlink" title="4.2配置主机名称以及主机 IP 信息"></a>4.2配置主机名称以及主机 IP 信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y1: hostnamectl set-hostname y1</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">y2: hostnamectl set-hostname y2  </span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure><p>打开网络配置文件后，修改 <strong>IPADDR</strong> 为我们刚才指定的 192.168.123.11，保存退出编辑器。</p><p>输入命令 service network restart 使新的网络配置文件生效。</p><p>y2 相同操作，主机名为 y2，IP 地址为 192.168.123.</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\27.png"></p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\28.png"></p><p>将其ip设置为 192.168.123.11 ，保存后，输入 service network restart 使配置生效。</p><h2 id="4-3测试集群连通性"><a href="#4-3测试集群连通性" class="headerlink" title="4.3测试集群连通性"></a>4.3测试集群连通性</h2><p>分别在 main, y1, y2 上进行互 ping 测试，如果能 ping 通则表示网络通信正常。</p><p>ping 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping main</span><br><span class="line">ping y1</span><br><span class="line">ping y2</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> 使用 Ctrl + C 停止 ping 命令。</p><p>如果不能 ping 成功，应检查网络配置是否正确。</p><h1 id="五、用Xshell管理三台虚拟机"><a href="#五、用Xshell管理三台虚拟机" class="headerlink" title="五、用Xshell管理三台虚拟机"></a>五、用Xshell管理三台虚拟机</h1><h2 id="5-1-打开Xshell软件，点击新建会话"><a href="#5-1-打开Xshell软件，点击新建会话" class="headerlink" title="5.1.打开Xshell软件，点击新建会话"></a>5.1.打开Xshell软件，点击新建会话</h2><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\29.png"></p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\30.png"></p><p><img src="https://img-blog.csdnimg.cn/20210512120313541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkyMTk5Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>按照这个方式将三个会话都连接上</p><h2 id="5-2-在xshell中制作免密码登陆"><a href="#5-2-在xshell中制作免密码登陆" class="headerlink" title="5.2 在xshell中制作免密码登陆"></a>5.2 在xshell中制作免密码登陆</h2><p>在main中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后一直按回车直到命令结束。<strong>同样的操作在，y1，y2中进行。</strong></p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\31.png"></p><p>在 main中一次输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id main</span><br><span class="line">ssh-copy-id y1</span><br><span class="line">ssh-copy-id y2</span><br></pre></td></tr></table></figure><p>然后根据提示输入main，有y1，y2的密码，这里就是实现了对登陆的免密操作。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\32.png"></p><p>在 main 中通过 ssh 命令测试是否免密登陆成功，如下图：</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\33.png"></p><h1 id="六、配置Hadoop"><a href="#六、配置Hadoop" class="headerlink" title="六、配置Hadoop"></a>六、配置Hadoop</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools/hadoop-2.7.7/etc/hadoop/</span><br><span class="line">在 main 中执行以下命令，并进行相应操作：</span><br></pre></td></tr></table></figure><h2 id="6-1修改hadoop-env-sh"><a href="#6-1修改hadoop-env-sh" class="headerlink" title="6.1修改hadoop-env.sh"></a>6.1修改hadoop-env.sh</h2><p>进入到hadoop-2.7.7文件夹,输入下面命令修改hadoop-env.sh:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p>将export JAVA_HOME修改为下面的值，然后保存并退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># The java implementation to use.</span><br><span class="line"></span><br><span class="line"> export JAVA_HOME=/root/HadoopTools/jdk1.8.0_171</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\34.png"></p><h2 id="6-2-修改yarn-env-sh"><a href="#6-2-修改yarn-env-sh" class="headerlink" title="6.2 修改yarn-env.sh"></a>6.2 修改yarn-env.sh</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-env.sh</span><br></pre></td></tr></table></figure><p>修改JAVA_HOME，然后保存退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#some Java parameters</span><br><span class="line"></span><br><span class="line"> #export JAVA_HOME=/home/y/libexec/jdk1.6.0/</span><br><span class="line"></span><br><span class="line">if [ &quot;$JAVA_HOME&quot; != &quot;&quot; ]; then</span><br><span class="line">  #echo &quot;run java in $JAVA_HOME&quot;</span><br><span class="line">  JAVA_HOME=/root/HadoopTools/jdk1.8.0_171</span><br></pre></td></tr></table></figure><h2 id="6-3修改core-site-xml"><a href="#6-3修改core-site-xml" class="headerlink" title="6.3修改core-site.xml"></a>6.3修改core-site.xml</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><p>修改 core-site.xml<br>将下面内容复制粘贴到文件中，然后保存退出。</p><p><strong>注意：配置时假如主机名称与博主不一致时请将<value></value>中的main修改为你的主机名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;hdfs://main:9000&lt;/value&gt;</span><br><span class="line">                &lt;description&gt;配置NameNode的URL&lt;/description&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--用来指定hadoop运行时产生的存放目录 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;/root/Hadooptools/hadoop-tmp&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\35.png"></p><h2 id="6-4修改mapred-site-xml"><a href="#6-4修改mapred-site-xml" class="headerlink" title="6.4修改mapred-site.xml"></a>6.4修改mapred-site.xml</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><p>修改 mapred-site.xml，将下面内容粘贴到文件中，保存退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;!-- 指定mr框架为yarn方式 --&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">                &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\36.png"></p><h2 id="6-5修改yarn-site-xml"><a href="#6-5修改yarn-site-xml" class="headerlink" title="6.5修改yarn-site.xml"></a>6.5修改yarn-site.xml</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><p>修改 yarn-site.xml，将下面内容粘贴到文件中：</p><p><strong>注意：配置时假如主机名称与博主不一致时请将<value></value>中的main修改为你的主机名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;!--指定yarn的老大resoucemanager的地址--&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;main&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!--NodeManager 获取数据的方式--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6修改slaves"><a href="#6-6修改slaves" class="headerlink" title="6.6修改slaves"></a>6.6修改slaves</h2><p>输入：vim slaves，修改 slaves<br>粘贴以下内容到文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">y1</span><br><span class="line">y2</span><br></pre></td></tr></table></figure><h2 id="6-7建立hadoop-tmp文件夹"><a href="#6-7建立hadoop-tmp文件夹" class="headerlink" title="6.7建立hadoop-tmp文件夹"></a>6.7建立hadoop-tmp文件夹</h2><p>cd到 HadoopTools 文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools/</span><br></pre></td></tr></table></figure><p>输入命令 , 新建文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir hadoop-tmp</span><br></pre></td></tr></table></figure><h2 id="6-8拷贝-Hadoop-到-y1-和-y2-中"><a href="#6-8拷贝-Hadoop-到-y1-和-y2-中" class="headerlink" title="6.8拷贝 Hadoop 到 y1 和 y2 中"></a>6.8拷贝 Hadoop 到 y1 和 y2 中</h2><p>依次在 y1，y2 上执行一下命令，千万别删错了，不要删除在main上的文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /root/Hadooptools/</span><br></pre></td></tr></table></figure><p>将 master 上的 Hadooptools文件夹复制到y1，y2上。</p><p>依次运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /root/HadoopTools root@y1:/root/</span><br><span class="line">scp -r /root/HadoopTools root@y2:/root/</span><br></pre></td></tr></table></figure><h1 id="七、配置、格式化、启动HDFS"><a href="#七、配置、格式化、启动HDFS" class="headerlink" title="七、配置、格式化、启动HDFS"></a>七、配置、格式化、启动HDFS</h1><h2 id="7-1配置hdfs-site-xml"><a href="#7-1配置hdfs-site-xml" class="headerlink" title="7.1配置hdfs-site.xml"></a>7.1配置hdfs-site.xml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="7-2该命令只能在master上执行，且只能执行一次，不可多次执行。"><a href="#7-2该命令只能在master上执行，且只能执行一次，不可多次执行。" class="headerlink" title="7.2该命令只能在master上执行，且只能执行一次，不可多次执行。"></a>7.2<strong>该命令只能在master上执行，且只能执行一次，不可多次执行。</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br><span class="line"></span><br><span class="line">/root/HadoopTools/hadoop-2.7.7/etc/hadoop/</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\38.png"></p><p>当看到如上图中所示 successfully 提示信息则表示格式化成功。</p><h2 id="7-3启动NameNode"><a href="#7-3启动NameNode" class="headerlink" title="7.3启动NameNode"></a>7.3<strong>启动NameNode</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;HADOOP_HOME&#125;/sbin/hadoop-daemon.sh start namenode starting namenode, logging to /root/HadoopTools/hadoop-2.7.7/logs/hadoop-hadoop-namenode-bigdata-senior01.chybinmy.com.out</span><br></pre></td></tr></table></figure><h2 id="7-4启动DataNode"><a href="#7-4启动DataNode" class="headerlink" title="7.4启动DataNode"></a>7.4<strong>启动DataNode</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;HADOOP_HOME&#125;/sbin/hadoop-daemon.sh start datanode starting datanode, logging to /root/HadoopTools/hadoop-2.7.7/logs/hadoop-hadoop-datanode-bigdata-senior01.chybinmy.com.out</span><br></pre></td></tr></table></figure><h2 id="7-5启动SecondaryNameNode"><a href="#7-5启动SecondaryNameNode" class="headerlink" title="7.5启动SecondaryNameNode"></a>7.5<strong>启动SecondaryNameNode</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;HADOOP_HOME&#125;/sbin/hadoop-daemon.sh start secondarynamenode starting secondarynamenode, logging to /root/HadoopTools/hadoop-2.7.7/logs/hadoop-hadoop-secondarynamenode-bigdata-senior01.chybinmy.com.out</span><br></pre></td></tr></table></figure><h2 id="7-6HDFS上测试创建目录、上传、下载文件"><a href="#7-6HDFS上测试创建目录、上传、下载文件" class="headerlink" title="7.6HDFS上测试创建目录、上传、下载文件"></a>7.6<strong>HDFS上测试创建目录、上传、下载文件</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#  $&#123;HADOOP_HOME&#125;/bin/hdfs dfs -mkdir /demo1</span><br><span class="line">[root@main hadoop-2.7.7]# $&#123;HADOOP_HOME&#125;/bin/hdfs dfs -put $&#123;HADOOP_HOME&#125;/etc/hadoop/core-site.xml /demo1</span><br><span class="line">[root@main hadoop-2.7.7]#  $&#123;HADOOP_HOME&#125;/bin/hdfs dfs -cat /demo1/core-site.xml</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\47.png"></p><h2 id="7-7从HDFS上下载文件到本地"><a href="#7-7从HDFS上下载文件到本地" class="headerlink" title="7.7从HDFS上下载文件到本地"></a>7.7从HDFS上下载文件到本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#  bin/hdfs dfs -get /demo1/core-site.xml</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\45.png"></p><h2 id="7-8启动Resourcemanager"><a href="#7-8启动Resourcemanager" class="headerlink" title="7.8启动Resourcemanager"></a>7.8启动Resourcemanager</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#  $&#123;HADOOP_HOME&#125;/sbin/yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure><h2 id="7-9启动nodemanager"><a href="#7-9启动nodemanager" class="headerlink" title="7.9启动nodemanager"></a>7.9启动nodemanager</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#  $&#123;HADOOP_HOME&#125;/sbin/yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure><p>#查看是否启动成功</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\47.png"></p><h1 id="八、启动-Hadoop-集群"><a href="#八、启动-Hadoop-集群" class="headerlink" title="八、启动 Hadoop 集群"></a>八、启动 Hadoop 集群</h1><h2 id="8-1一行命令启动-Hadoop-集群"><a href="#8-1一行命令启动-Hadoop-集群" class="headerlink" title="8.1一行命令启动 Hadoop 集群"></a>8.1一行命令启动 Hadoop 集群</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\37.png"></p><h2 id="8-2用宿主机浏览器访问-http-192-168-123-10-50070-查看启动是否成功。"><a href="#8-2用宿主机浏览器访问-http-192-168-123-10-50070-查看启动是否成功。" class="headerlink" title="8.2用宿主机浏览器访问 http://192.168.123.10:50070 查看启动是否成功。"></a>8.2用宿主机浏览器访问 <a href="http://192.168.123.10:50070/">http://192.168.123.10:50070</a> 查看启动是否成功。</h2><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\39.png"></p><p>在上图可以看到有3台节点同时在线，如果不是3台证明有问题，需要查看哪里出错了。如果是3台表配置成功。</p><h2 id="8-3登陆yarn的WebUI-http-192-168-123-10-8088"><a href="#8-3登陆yarn的WebUI-http-192-168-123-10-8088" class="headerlink" title="8.3登陆yarn的WebUI http://192.168.123.10:8088/"></a>8.3登陆yarn的WebUI <a href="http://192.168.123.10:8088/">http://192.168.123.10:8088/</a></h2><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\40.png"></p><h1 id="九、运行MapReduce-Job"><a href="#九、运行MapReduce-Job" class="headerlink" title="九、运行MapReduce Job"></a>九、<strong>运行MapReduce Job</strong></h1><h2 id="9-1创建测试用的Input文件-创建输入目录"><a href="#9-1创建测试用的Input文件-创建输入目录" class="headerlink" title="9.1创建测试用的Input文件,创建输入目录:"></a>9.1创建测试用的Input文件,创建输入目录:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]# bin/hdfs dfs -mkdir -p /wordcountdemo/input</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-2将wc-input文件上传到HDFS的-wordcountdemo-input目录中"><a href="#9-2将wc-input文件上传到HDFS的-wordcountdemo-input目录中" class="headerlink" title="9.2将wc.input文件上传到HDFS的/wordcountdemo/input目录中:"></a>9.2将wc.input文件上传到HDFS的/wordcountdemo/input目录中:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#  bin/hdfs dfs -put /opt/data/wc.input /wordcountdemo/input</span><br></pre></td></tr></table></figure><h2 id="9-3运行WordCount-MapReduce-Job"><a href="#9-3运行WordCount-MapReduce-Job" class="headerlink" title="9.3运行WordCount MapReduce Job"></a>9.3运行WordCount MapReduce Job</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#bin/yarn jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar wordcount /wordcountdemo/input /wordcountdemo/output</span><br></pre></td></tr></table></figure><h2 id="9-4查看输出结果目录"><a href="#9-4查看输出结果目录" class="headerlink" title="9.4查看输出结果目录"></a>9.4查看输出结果目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#bin/hdfs dfs -ls /wordcountdemo/output</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\48.png"></p><p>output目录中有两个文件，_SUCCESS文件是空文件，有这个文件说明Job执行成功。part-r-00000文件是结果文件，其中-r-说明这个文件是Reduce阶段产生的结果，mapreduce程序执行时，可以没有reduce阶段，但是肯定会有map阶段，如果没有reduce阶段这个地方有是-m-。一个reduce会产生一个part-r-开头的文件。查看输出文件内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@main hadoop-2.7.7]#bin/hdfs dfs -cat /wordcountdemo/output/part-r-00000</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\49.png"></p><h1 id="十、安装spark"><a href="#十、安装spark" class="headerlink" title="十、安装spark"></a>十、安装spark</h1><h2 id="10-1登陆Apache-spark官网下载spark"><a href="#10-1登陆Apache-spark官网下载spark" class="headerlink" title="10.1登陆Apache spark官网下载spark"></a>10.1登陆Apache spark官网下载spark</h2><p>地址：<a href="http://spark.apache.org/downloads.html">http://spark.apache.org/downloads.html</a><br>如下图所示下载 Spark:</p><p><img src="https://img-blog.csdnimg.cn/20210512154150632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTkyMTk5Ng==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再次使用Win SCP 将下载的压缩包传到main主机</p><p>在Xshell中解压刚刚上传的压缩包（依次输入下面命令）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools</span><br><span class="line"></span><br><span class="line"> tar -zxvf spark-3.1.1-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure><p>将spark-3.1.1-bin-hadoop2.7文件夹名字修改成spark<br>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv spark-3.1.1-bin-hadoop2.7 spark</span><br></pre></td></tr></table></figure><p>修改环境变量，添加spark<br>输入：vim /root/.bash_profile<br>添加下面内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/root/HadoopTools/spark </span><br><span class="line">export PATH=$PATH:$&#123;SPARK_HOME&#125;/bin</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\41.png"></p><p>输入：source /root/.bash_profile，使其生效。</p><h2 id="10-2编辑spark-env-sh"><a href="#10-2编辑spark-env-sh" class="headerlink" title="10.2编辑spark-env.sh"></a>10.2编辑spark-env.sh</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools/spark/conf/</span><br><span class="line"></span><br><span class="line">cp spark-env.sh.template spark-env.sh</span><br><span class="line"></span><br><span class="line">vim spark-env.sh</span><br></pre></td></tr></table></figure><p>将下面内容添加到文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/root/HadoopTools/jdk1.8.0_171</span><br><span class="line">export SPARK_MASTER_IP=192.168.123.10</span><br><span class="line">export SPARK_WORKER_MEMORY=1g</span><br><span class="line">export HADOOP_CONF_DIR=/root/HadoopTools/hadoop-2.7.7/etc/hadoop</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\42.png"></p><h2 id="10-3添加y1，y2节点信息"><a href="#10-3添加y1，y2节点信息" class="headerlink" title="10.3添加y1，y2节点信息"></a>10.3添加y1，y2节点信息</h2><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /root/HadoopTools/spark/conf/slaves</span><br></pre></td></tr></table></figure><p>在文件中添加，保存退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y1</span><br><span class="line">y2</span><br></pre></td></tr></table></figure><p>将spark文件夹复制到y1，y2<br>运行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools</span><br><span class="line">scp -r spark root@y1:/root/HadoopTools/</span><br><span class="line">scp -r spark root@y2:/root/HadoopTools/</span><br></pre></td></tr></table></figure><p>进入spark文件夹，启动spark<br>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools/spark/sbin/ </span><br><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure><p>在主机的浏览器中访问地址：<a href="http://192.168.123.10:8080/">http://192.168.123.10:8080</a> ，查看是否能成功访问</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\43.png"></p><p>测试spark运行是否正常<br>运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/HadoopTools/spark/</span><br><span class="line">./bin/spark-submit --class org.apache.spark.examples.SparkPi --master spark://main:7077 ./examples//jars/spark-examples_2.12-3.1.1.jar 100</span><br></pre></td></tr></table></figure><p>然后打开spark的WebUI查看运行情况<br><a href="http://192.168.154.128:8080/">http://192.168.123.10:8080</a></p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\44.png"></p><p>到此本章教程已结束，感谢阅读！</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本教程是基于CentOS7上安装和使用docker。本次使用的是在Windows自带的hyper-V中安装CentOS7并创建的虚拟机。</p><p>安装CentOs创建虚拟机教程可查看上一篇：<a href="https://xhgm.club/Hadoop%E7%9A%84%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAwindows%E5%9F%BA%E4%BA%8EHyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%E4%B8%BB%E4%BA%8C%E4%BB%8E%EF%BC%89/">Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）</a></p><h6 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目前，CentOS 仅发行版本中的内核支持 Docker。</span><br><span class="line">1、Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</span><br><span class="line">2、Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</span><br></pre></td></tr></table></figure><h2 id="1-1查看CentOS内核"><a href="#1-1查看CentOS内核" class="headerlink" title="1.1查看CentOS内核"></a>1.1查看CentOS内核</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><p>通过 uname -r 命令查看你当前的内核版本</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\59.png"></p><p><strong>tips</strong>:从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。<br> Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。</p><h2 id="1-2安装与配置"><a href="#1-2安装与配置" class="headerlink" title="1.2安装与配置"></a>1.2安装与配置</h2><h5 id="1-更新-yum-源"><a href="#1-更新-yum-源" class="headerlink" title="1.更新 yum 源"></a>1.更新 yum 源</h5><p>输入以下命令回车执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h5 id="2-安装依赖包"><a href="#2-安装依赖包" class="headerlink" title="2.安装依赖包"></a>2.安装依赖包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2 </span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\57.png"></p><h5 id="3-设置阿里云镜像源"><a href="#3-设置阿里云镜像源" class="headerlink" title="3.设置阿里云镜像源"></a>3.设置阿里云镜像源</h5><ul><li>重建 Yum 缓存。</li><li>安装 Docker-CE ，请执行一下命令进行安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h5 id="4-启动-Docker-CE"><a href="#4-启动-Docker-CE" class="headerlink" title="4.启动 Docker-CE"></a>4.启动 Docker-CE</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h5 id="5-镜像加速配置"><a href="#5-镜像加速配置" class="headerlink" title="5.镜像加速配置"></a>5.镜像加速配置</h5><p>这里使用的是 <a href="https://cr.console.aliyun.com/#/accelerator">阿里云提供的镜像加速</a> ，登录并且设置密码之后在左侧容器镜像服务下的镜像加速，如下图三步，</p><p>通过修改daemon配置文件/etc/docker/daemon.json来使用加速器，将步骤三的命令复制到主机命令窗口。</p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\58.png"></p><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\53.png"></p><p>之后重新加载配置，并且重启 Docker 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h5 id="6-测试运行-hello-world"><a href="#6-测试运行-hello-world" class="headerlink" title="6.测试运行 hello-world"></a>6.测试运行 hello-world</h5><p>输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\56.png"></p><p>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行，看到显示Hello from Docker!表示Docker安装启动成功。</p><h6 id="7-查看docker状态"><a href="#7-查看docker状态" class="headerlink" title="7.查看docker状态"></a>7.查看docker状态</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\57.png"></p><p>如上图显示的绿色字体，active（runing)表示正在运行。</p><h2 id="2-docker镜像操作"><a href="#2-docker镜像操作" class="headerlink" title="2.docker镜像操作"></a>2.docker镜像操作</h2><h3 id="2-1列出所有docker镜像"><a href="#2-1列出所有docker镜像" class="headerlink" title="2.1列出所有docker镜像"></a>2.1列出所有docker镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\60.png"></p><p>各个选项说明:</p><p>REPOSITORY：表示镜像的仓库源</p><p>TAG：镜像的标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像创建时间</p><p>SIZE：镜像大小</p><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><h2 id="2-2拉取镜像"><a href="#2-2拉取镜像" class="headerlink" title="2.2拉取镜像"></a>2.2拉取镜像</h2><p>拉取微软在 Docker 上的 aspnetcore 镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull microsoft/aspnetcore</span><br></pre></td></tr></table></figure><p>之后执行以下命令查看是否拉取成功:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\64.png"></p><h2 id="3-docker容器操作"><a href="#3-docker容器操作" class="headerlink" title="3.docker容器操作"></a>3.docker容器操作</h2><p>容器是基于镜像创建的，说白了把一个镜像运行起来就是容器</p><h3 id="3-1查看容器"><a href="#3-1查看容器" class="headerlink" title="3.1查看容器"></a>3.1查看容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\65.png"></p><h2 id="3-2创建容器"><a href="#3-2创建容器" class="headerlink" title="3.2创建容器"></a>3.2创建容器</h2><p>docker run 创建tomcat容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name tomcat -d -p 8080:8080 tomcat</span><br></pre></td></tr></table></figure><p><img src="D:\Hexo\source_posts\Hadoop的集群搭建windows基于Hyper-V虚拟机超详细教程（一主二从）\66.png"></p><p>访问试试，通过浏览器输入主机ip:8080成功访问到tomcat主页。</p><p><img src="https://upload-images.jianshu.io/upload_images/8504906-bea4002f5278c143.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQlite存储方式</title>
      <link href="/SQlite%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/SQlite%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android使用SQLite作为存储数据库，它是一个免费开源且与底层无关的数据库。<br>Android提供了创建和使用SQLite数据库的API</p><p>LayoutInflater将布局XML文件实例化为其相应的视图对象</p><p>ArrayAdapter数组适配器</p><p>ArrayAdapter是一个比较简单的数组适配器，只能展示一行文字，无需自定义布局，使用系统提供的布局即可。<br>这个适配器可以为AdapterView提供视图，为您提供的数据对象集合中的每个对象返回视图，并且可以与基于列表的用户界面小部件（ListView或Spinner）一起使用。</p><p><span style='color:white;background:black;font-size:20px;font-family:仿宋;'>默认情况下，数组适配器通过对您提供的集合的每个数据对象调用Object.toString()来创建一个视图，并且将结果放置在TextView中。</span><br>您还可以自定义用于集合中数据对象的视图类型，要自定义数据对象使用的视图类型。</p><p>以下是ArrayAdapter常用的构造函数用于生成数组适配器：<br><span style='color:white;background:black;font-size:20px;font-family:仿宋;'><br>ArrayAdapter(Context context,int resourse,int textViewResId)<br>ArrayAdapter(Context context,int textViewResId,T[] object)<br>ArrayAdapter(Context context,int textViewResId,List&lt;<span style="color:red;">T</span>&gt;object)</span></p><p>Context: 上下文环境，在Activity中一般使用this<br>resourse: 资源ID<br>textViewResId：文本视图资源ID，如下拉列表组件的ID<br>object： 泛指数据/集合</p><p>ArrayAdapter使用步骤：<br><b>·</b> 定义一个数组或者集合用于存放ListView中的item的内容<br><b>·</b> 使用ArrayAdapter的构造方法创建一个ArrayAdapter对象。ArrayAdapter有很多构造函数的方法，最常用的就是带有三个参数的方法，第一个是上下文对象，第二个参数对象是ListView每一行（item）的布局资源ID；第三个参数就是数据源。<br><b>·</b> 使用ListView的setAdapter()方法绑定ArrayAdapter.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
